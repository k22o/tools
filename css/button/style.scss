$backColor: white;
$frontColor: black;

h1 {
    background-color: gray;
    color: white;
}

h3 {
    color: red;
}

#container {
    text-align: center;

    .btn {
        position: relative;
        color: $frontColor;
        width: 120px;
        height: 40px;
        font-weight: 700;
        background-color: $backColor;
        border: 1px solid $frontColor;
        padding: 10px 25px;
        margin: 0px auto;
        cursor: pointer;
        transition: all 0.4s;//hover時に、どの要素をどの速度で変化させるか

        &.colorChange {
            border-radius: 6px; //枠の丸み
            &:hover {
                color: $backColor;
                background-color: $frontColor;
                letter-spacing: 2px;//文字の間隔が開く
            }
        }

        &.shadow {
            //box-shadow: none;
            &:hover {
                transform: translate(-2.5px, -2.5px);
                box-shadow: 5px 5px 0 0 gray;
            }
        }

        &.slide {
            position: relative;
            overflow: hidden; // 親要素の枠外を見えなくする <-> visible
            z-index: 1; // z-indexを指定しないと、文字がspanに消される

            & span {
                display: inline-block;
                background-color: $frontColor;
                width: 100%;
                height: 100%;
                position: absolute;
                top: 0;
                left: 0;            
                transform: translateX(-100%);
                transition: transform 0.4s;
                z-index: -1;
            }

            &:hover{
                color: white;

                span {
                    transform: none;
                }
            }
        }

        /*
        疑似要素 (::before, ::after) を使う
        */
        &.slide2 {
            position: relative;
            overflow: hidden;
            z-index: 1; 

            &::before {
                content: '';//疑似要素の生成には、contentが必須。今回は文字不要につき空
                display: inline-block;
                background-color: $frontColor;
                width: 100%;
                height: 100%;
                position: absolute;
                top: 0;
                left: 0;            
                transform: translateX(-100%);
                transition: transform 0.4s ease-out;
                z-index: -1;
            }

            &:hover{
                color: white;

                &::before {
                    transform: none;
                }
            }
        }

        &.cover3d {
            position: relative;
            transform-style: preserve-3d; //childrenを3D要素として扱う
            perspective: 300px; //奥行
            // perspective-origin: 50% 50%; //50% 50%が真正面 (default値)

            & span {
                display: inline-block;
                transform: translateZ(30px)
            }

            &::before {
                content: '';//疑似要素の生成には、contentが必須。今回は文字不要につき空
                display: inline-block;
                background-color: $frontColor;
                width: 100%;
                height: 100%;
                position: absolute;
                top: 0;
                left: 0;            
                transform: rotateX(90deg);
                transition: all 0.4s;
                transform-origin: top center;
                opacity: 0;
            }

            &:hover{
                color: $backColor;

                &::before {
                    transform: none;
                    opacity: 1;
                }
            }
        }

        &.cubic {
            & span {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                border: 1px solid $frontColor;
                line-height: 38px; 
                transition: all 0.4s;
                transform-origin: center center -25px;
            }

            & .firstState {
                background-color: $backColor;
                color: $frontColor;
                transform: rotateX(0);
            }

            & .secondState {
                background-color: $frontColor;
                color: $backColor;
                transform: rotateX(90deg);
            }

            &:hover {
                & .firstState {
                    transform: rotateX(-90deg);
                }
                & .secondState {
                    transform: rotateX(0);
                }
            }
        }
    }
}