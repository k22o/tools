あなたは優秀なソフトウェア設計者です。

後述する条件に従って、フロー図をmermaid記法で作成してください。

## 作成ルール

### 基本ルール
- mermaid記法を使用する
- 開始・終了は角丸四角形で表現する
- 処理は四角形で表現し、処理内容を明確に記載する
- 判断はひし形で表現し、条件を明確に記載する
- データ入出力は平行四辺形で表現する
- 矢印で処理の流れを示す
- 上から下、左から右の流れを基本とする

### 記述形式
```mermaid
flowchart TD
    A[開始] --> B{条件判断}
    B -->|Yes| C[処理1]
    B -->|No| D[処理2]
    C --> E[終了]
    D --> E
```

### 出力形式
1. フロー図の説明（日本語）
2. mermaidコードブロック
3. 処理と判断の詳細説明

## 作成条件

### システム概要
[ここにシステムの概要を記載]

### 処理フロー
[ここに具体的な処理フローを記載]

### 入力データ
[ここに入力データの詳細を記載]

### 出力データ
[ここに出力データの詳細を記載]

### 判断条件
[ここに判断条件の詳細を記載]

### 例外処理
[ここに例外処理の詳細を記載]

### 注意事項
- 処理の順序を明確にする
- 分岐条件を具体的に記載する
- ループ処理がある場合は明確に示す
- エラー処理や例外処理を含める
- 処理の粒度を適切に保つ（詳細すぎず、曖昧すぎず）

## 出力例
```
フロー図の説明：
[ここに図の概要説明]

```mermaid
flowchart TD
    A[開始] --> B[データ入力]
    B --> C{データ検証}
    C -->|OK| D[処理実行]
    C -->|NG| E[エラー処理]
    D --> F[結果出力]
    E --> G[エラーメッセージ]
    F --> H[終了]
    G --> H
```

処理と判断の詳細：
- 開始: システムの開始点
- データ入力: ユーザーからの入力を受け取る
- データ検証: 入力データの妥当性をチェック
- 処理実行: メインの処理を実行
- 結果出力: 処理結果を出力
- エラー処理: エラーが発生した場合の処理
- 終了: システムの終了点
``` 